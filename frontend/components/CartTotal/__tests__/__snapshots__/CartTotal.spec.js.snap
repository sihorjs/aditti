// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CartTotal /> renders without crash 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CartTotal
    totalPrice={1000}
    totalQuantity={3}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div
        className="cart-total"
      >
        <div
          className="cart-total__price"
        >
          $ 1000
        </div>
        <div
          className="cart-total__quantity"
        >
          3
        </div>
      </div>,
      "replace": false,
      "to": "/cart",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="cart-total__price"
          >
            $ 1000
          </div>,
          <div
            className="cart-total__quantity"
          >
            3
          </div>,
        ],
        "className": "cart-total",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "$ 1000",
            "className": "cart-total__price",
          },
          "ref": null,
          "rendered": "$ 1000",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 3,
            "className": "cart-total__quantity",
          },
          "ref": null,
          "rendered": 3,
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div
          className="cart-total"
        >
          <div
            className="cart-total__price"
          >
            $ 1000
          </div>
          <div
            className="cart-total__quantity"
          >
            3
          </div>
        </div>,
        "replace": false,
        "to": "/cart",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="cart-total__price"
            >
              $ 1000
            </div>,
            <div
              className="cart-total__quantity"
            >
              3
            </div>,
          ],
          "className": "cart-total",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "$ 1000",
              "className": "cart-total__price",
            },
            "ref": null,
            "rendered": "$ 1000",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": 3,
              "className": "cart-total__quantity",
            },
            "ref": null,
            "rendered": 3,
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
